name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      # 打印可用的 Xcode 版本
      - name: List Available Xcode Versions
        run: ls -la /Applications/ | grep "Xcode"

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app
        
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.29.0'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
          
       # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products
      # 设置 CocoaPods
#      - name: Setup CocoaPods
#        run: |
#          cd ios
#          rm -rf Pods
#          rm -f Podfile.lock
#          pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"

      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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



          certificate-password: 123456
          
          provisioning-profile-base64: 


          keychain-password: 111111

      # # 添加检查步骤
      # - name: 检查构建文件
      #   run: |
      #     echo "检查 build/ios/ipa 目录内容："
      #     ls -la build/ios/ipa/
      #     echo "检查 build/ios 目录内容："
      #     ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/秒遇.ipa"
          APPLE_ID: "liangyuyi@wildtrekhk.shop"
          APP_SPECIFIC_PASSWORD: "yylp-wmai-zbqn-lmht"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
